<?php

namespace Tests\Application\Personas;

use App\Application\Personas\CreatePersonaCommandHandler;
use App\Application\Personas\DeletePersonaCommandHandler;
use App\Domain\Personas\PersonasRepository;
use App\Infrastructure\Personas\InMemoryPersonasRepository;
use PHPUnit\Framework\TestCase;

class DeletePersonaCommandHandlerTest extends TestCase
{
    private PersonasRepository $repository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = new InMemoryPersonasRepository();
    }

    public function testHandle()
    {
        $values = [];
        $values['apellido'] = 'Pankie';
        $values['nombre'] = 'Marcos';
        $values['apodo'] = 'El Pankie';
        $add = new CreatePersonaCommandHandler($this->repository);
        $result = $add->handle($values);
        $this->assertCount(1, $this->repository->getAll());
        $id = $result['data'];
        $update = new DeletePersonaCommandHandler($this->repository);
        $result = $update->handle($id);
        $this->assertEquals(200, $result['code'], $result['message']);
        $persona = $this->repository->findById($id);
        $this->assertNull($persona);
        $this->assertCount(0, $this->repository->getAll());
    }

    public function testMustFailWhenPersonaDoesNotExist()
    {
        $values = [];
        $values['apellido'] = 'Pankie';
        $values['nombre'] = 'Marcos';
        $values['apodo'] = 'El Pankie';
        $add = new CreatePersonaCommandHandler($this->repository);
        $result = $add->handle($values);
        $this->assertCount(1, $this->repository->getAll());
        $id = $result['data'];
        $update = new DeletePersonaCommandHandler($this->repository);
        $result = $update->handle(0);
        $this->assertEquals(404, $result['code'], $result['message']);
        $persona = $this->repository->findById($id);
        $this->assertNotNull($persona);
        $this->assertCount(1, $this->repository->getAll());
    }

}
