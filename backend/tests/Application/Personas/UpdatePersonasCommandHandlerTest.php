<?php

namespace Tests\Application\Personas;

use App\Application\Personas\CreatePersonaCommandHandler;
use App\Application\Personas\UpdatePersonasCommandHandler;
use App\Domain\Personas\Persona;
use App\Domain\Personas\PersonasRepository;
use App\Infrastructure\Personas\InMemoryPersonasRepository;
use PHPUnit\Framework\TestCase;

class UpdatePersonasCommandHandlerTest extends TestCase
{
    private PersonasRepository $repository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = new InMemoryPersonasRepository();
    }

    public function testHandle()
    {
        $values = [];
        $values['apellido'] = 'Pankie';
        $values['nombre'] = 'Marcos';
        $values['apodo'] = 'El Pankie';
        $add = new CreatePersonaCommandHandler($this->repository);
        $result = $add->handle($values);
        $id = $result['data'];
        $values['id'] = $id;
        $values['apellido'] = 'Ponce';
        $values['nombre'] = 'Marcos David';
        $values['apodo'] = 'El Pankie';
        $update = new UpdatePersonasCommandHandler($this->repository);
        $result = $update->handle($values);
        $this->assertEquals(200, $result['code'], $result['message']);
        $persona = $this->repository->findById($id);
        $this->assertObjectValues($values, $persona);
    }

    private function assertObjectValues(array $values, ?Persona $newPersona): void
    {
        $this->assertEquals($values['apellido'], $newPersona->getApellido() );
        $this->assertEquals($values['nombre'], $newPersona->getNombre() );
        $this->assertEquals($values['apodo'], $newPersona->getApodo() );
    }

    public function testMustFailWhenApellidoIsEmpty(): void
    {
        $values = [];
        $values['apellido'] = 'Pankie';
        $values['nombre'] = 'Marcos';
        $values['apodo'] = 'El Pankie';
        $add = new CreatePersonaCommandHandler($this->repository);
        $result = $add->handle($values);
        $id = $result['data'];
        $values['id'] = $id;
        $values['apellido'] = '';
        $values['nombre'] = 'Marcos David';
        $values['apodo'] = 'El Pankie';
        $update = new UpdatePersonasCommandHandler($this->repository);
        $result = $update->handle($values);
        $this->assertEquals(500, $result['code'], $result['message']);
    }

    public function testMustFailWhenNombreIsEmpty(): void
    {
        $values = [];
        $values['apellido'] = 'Pankie';
        $values['nombre'] = 'Marcos';
        $values['apodo'] = 'El Pankie';
        $add = new CreatePersonaCommandHandler($this->repository);
        $result = $add->handle($values);
        $id = $result['data'];
        $values['id'] = $id;
        $values['apellido'] = 'Ponce';
        $values['nombre'] = '';
        $values['apodo'] = 'El Pankie';
        $update = new UpdatePersonasCommandHandler($this->repository);
        $result = $update->handle($values);
        $this->assertEquals(500, $result['code'], $result['message']);
    }

    public function testMustFailWhenPersonaDoesNotExist(): void
    {
        $values = [];
        $values['apellido'] = 'Pankie';
        $values['nombre'] = 'Marcos';
        $values['apodo'] = 'El Pankie';
        $add = new CreatePersonaCommandHandler($this->repository);
        $result = $add->handle($values);
        $values['id'] = 0;
        $update = new UpdatePersonasCommandHandler($this->repository);
        $result = $update->handle($values);
        $this->assertEquals(404, $result['code'], $result['message']);
    }

}
